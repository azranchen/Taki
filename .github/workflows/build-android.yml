name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-17-jdk wget

    - name: Set up Android SDK and NDK
      run: |
        # Accept licenses
        mkdir -p ~/.android
        touch ~/.android/repositories.cfg
        
        # Create required directories
        mkdir -p $ANDROID_SDK_ROOT
        cd $ANDROID_SDK_ROOT
        
        # Clean up any existing cmdline-tools
        rm -rf cmdline-tools cmdline-tools.zip
        
        # Download and extract command line tools
        echo "Downloading command line tools..."
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
        unzip -q cmdline-tools.zip -d cmdline-tools
        mkdir -p cmdline-tools/latest
        mv cmdline-tools/cmdline-tools/* cmdline-tools/latest/
        rm -rf cmdline-tools.zip cmdline-tools/cmdline-tools
        
        # Add to PATH
        export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin
        
        # Accept licenses
        yes | sdkmanager --sdk_root=$ANDROID_SDK_ROOT --licenses
        
        # Install required components
        sdkmanager --sdk_root=$ANDROID_SDK_ROOT \
          "platform-tools" \
          "platforms;android-33" \
          "build-tools;33.0.3" \
          "cmdline-tools;latest" \
          "tools"
        
        # Verify build-tools installation
        echo "=== Verifying build-tools installation ==="
        BUILD_TOOLS_DIR="$ANDROID_SDK_ROOT/build-tools/33.0.3"
        if [ -d "$BUILD_TOOLS_DIR" ]; then
          echo "Build tools found at: $BUILD_TOOLS_DIR"
          ls -la "$BUILD_TOOLS_DIR"
        else
          echo "ERROR: Build tools not found at $BUILD_TOOLS_DIR"
          echo "Available versions:"
          ls -la "$ANDROID_SDK_ROOT/build-tools" || echo "No build-tools directory found"
          exit 1
        fi
        
        # Verify AIDL is available
        echo "=== Verifying AIDL installation ==="
        AIDL_PATH=$(find "$BUILD_TOOLS_DIR" -name aidl | head -n 1)
        if [ -f "$AIDL_PATH" ]; then
          echo "AIDL found at: $AIDL_PATH"
          chmod +x "$AIDL_PATH"
          echo "AIDL version: $($AIDL_PATH --version || echo 'Could not get version')"
        else
          echo "ERROR: AIDL not found in build-tools!"
          find "$ANDROID_SDK_ROOT" -name aidl || echo "AIDL not found in SDK"
          exit 1
        fi
        
        # Ensure build-tools are in PATH
        export PATH=$PATH:$BUILD_TOOLS_DIR
        
        # Manually download and install NDK 25b
        echo "Downloading NDK 25b..."
        mkdir -p $ANDROID_SDK_ROOT/ndk
        wget -q https://dl.google.com/android/repository/android-ndk-r25b-linux.zip -O ndk.zip
        unzip -q ndk.zip -d $ANDROID_SDK_ROOT/ndk
        mv $ANDROID_SDK_ROOT/ndk/android-ndk-r25b $ANDROID_SDK_ROOT/ndk/25b
        rm ndk.zip
        
        # Set environment variables
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25b" >> $GITHUB_ENV
        echo "PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_ENV

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython==0.29.36

    - name: Verify buildozer.spec
      run: |
        echo "=== buildozer.spec ==="
        cat buildozer.spec || echo "No buildozer.spec found"
        echo "===================="

    - name: Build with Buildozer
      run: |
        # Set environment variables
        export ANDROID_SDK_ROOT=${{ env.ANDROID_SDK_ROOT }}
        export ANDROID_NDK_HOME=${{ env.ANDROID_NDK_HOME }}
        
        # Verify environment
        echo "=== Environment Variables ==="
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "PATH: $PATH"
        
        # Verify build-tools
        echo "=== Build Tools ==="
        ls -la $ANDROID_SDK_ROOT/build-tools/
        
        # Run buildozer with debug info
        buildozer -v android debug
        
        # List the built APK
        echo "=== Build Artifacts ==="
        ls -la bin/

    - name: List build artifacts
      run: |
        ls -la bin/

    - name: Upload APK
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: taki-poker-apk
        path: bin/*.apk
        retention-days: 7
        if-no-files-found: error

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: bin/*.apk
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}